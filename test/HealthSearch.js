
const BigNumber = web3.BigNumber
const should = require('chai')
  .use(require('chai-as-promised'))
  .use(require('chai-bignumber')(BigNumber))
  .should()

var HealthCashMock = artifacts.require('./helpers/HealthCashMock.sol');
var HealthSearch = artifacts.require("./HealthSearch.sol")
import isAddress from './helpers/isAddress'

contract('HealthSearch', function(accounts) {

  beforeEach(async function() {
    this.token = await HealthCashMock.new()
    this.search = await HealthSearch.new(this.token.address)
    this.owner=accounts[0]

    console.log(this.owner)
    // await this.token.approve(this.search.address,100000000,{from: this.owner})
    await this.token.approve(this.search.address,100000);
    // await this.token.approve(this.owner,100000000,{from: this.search.address})



  })
  it('tokens owned', async function() {
    let owner= await this.token.getOwner()
    let balance= await this.token.getBalance()

    this.owner.should.equal(owner);
    balance.toNumber().should.equal(100000000);

  })
  it('should be able to create a seller', async function() {
    let tx = await this.search.setPotentialSellers('0x0000000000000000000000000000000000000000000000000000000000000001','0x0000000000000000000000000000000000000000000000000000000000000002','0x0000000000000000000000000000000000000000000000000000000000000003','0x0000000000000000000000000000000000000000000000000000000000000004')
    let curOwner='0x0000000000000000000000000000000000000000000000000000000000000004'
    let result = await this.search.getPotentialSellers('0x0000000000000000000000000000000000000000000000000000000000000002', '0x0000000000000000000000000000000000000000000000000000000000000003')
    curOwner.should.equal(result[0]);
  })
  it('should stake 1 coin', async function() {
    let tx = await this.search.setPotentialSellers('0x0000000000000000000000000000000000000000000000000000000000000001','0x0000000000000000000000000000000000000000000000000000000000000002','0x0000000000000000000000000000000000000000000000000000000000000003','0x0000000000000000000000000000000000000000000000000000000000000004')
    let curOwner='0x0000000000000000000000000000000000000000000000000000000000000004'
    let result = await this.search.getPotentialSellers('0x0000000000000000000000000000000000000000000000000000000000000002', '0x0000000000000000000000000000000000000000000000000000000000000003')
    let bal = await this.token.balanceOf(this.owner)
    bal.toNumber().should.equal(99999999);
  })
  it('should delete a seller', async function() {
    let tx = await this.search.setPotentialSellers('0x0000000000000000000000000000000000000000000000000000000000000001','0x0000000000000000000000000000000000000000000000000000000000000002','0x0000000000000000000000000000000000000000000000000000000000000003','0x0000000000000000000000000000000000000000000000000000000000000004')
    let curOwner='0x0000000000000000000000000000000000000000000000000000000000000004'
    let tx2 = await this.search.deletePotentialSellers('0x0000000000000000000000000000000000000000000000000000000000000002','0x0000000000000000000000000000000000000000000000000000000000000003')
    let result2 = await this.search.getPotentialSellers('0x0000000000000000000000000000000000000000000000000000000000000002', '0x0000000000000000000000000000000000000000000000000000000000000003')
    let shouldBe=[]
    let total=0;
    for(var i=0;i<result2.length;i++){
      if(result2[i]!='0x0000000000000000000000000000000000000000000000000000000000000000')
        total++;
    }
    shouldBe.length.should.equal(total);

  })
  it('should return 1 coin', async function() {
      let tx = await this.search.setPotentialSellers('0x0000000000000000000000000000000000000000000000000000000000000001','0x0000000000000000000000000000000000000000000000000000000000000002','0x0000000000000000000000000000000000000000000000000000000000000003','0x0000000000000000000000000000000000000000000000000000000000000004')
      let curOwner='0x0000000000000000000000000000000000000000000000000000000000000004'
      let tx2 = await this.search.deletePotentialSellers('0x0000000000000000000000000000000000000000000000000000000000000002','0x0000000000000000000000000000000000000000000000000000000000000003')
    let bal = await this.token.balanceOf(this.owner)
    bal.toNumber().should.equal(100000000);
  })

})
